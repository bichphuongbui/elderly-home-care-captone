// Service ƒë·ªÉ qu·∫£n l√Ω th√¥ng tin gia ƒë√¨nh
export interface FamilyMember {
  id: string;
  name: string;
  age: number;
  relationship: string;
  avatar: string;
  medicalConditions: string[];
  medications: string[];
  lastCheckup: string;
  notes: string;
  bloodPressure: string;
  bloodSugar: string;
  weight: string;
  height: string;
  bloodPressureUpdatedBy: string;
  bloodPressureUpdatedAt: string;
  bloodSugarUpdatedBy: string;
  bloodSugarUpdatedAt: string;
  // Th√¥ng tin s·ª©c kh·ªèe chi ti·∫øt
  heartRate: string;
  temperature: string;
  oxygenSaturation: string;
  bmi: string;
  allergies: string[];
  emergencyContact: string;
  emergencyPhone: string;
  doctorName: string;
  doctorPhone: string;
  nextAppointment: string;
  healthAlerts: {
    type: 'warning' | 'danger' | 'info';
    message: string;
    date: string;
  }[];
  vitalHistory: {
    date: string;
    bloodPressure: string;
    bloodSugar: string;
    heartRate: string;
    weight: string;
    recordedBy: string;
  }[];
}

// Mock data - trong th·ª±c t·∫ø s·∫Ω g·ªçi API
const mockFamilyMembers: FamilyMember[] = [
  {
    id: 'fm1',
    name: 'Nguy·ªÖn VƒÉn B·ªë',
    age: 72,
    relationship: 'B·ªë',
    avatar: 'üë®‚Äçü¶≥',
    medicalConditions: ['Cao huy·∫øt √°p', 'Ti·ªÉu ƒë∆∞·ªùng type 2'],
    medications: ['Metformin', 'Amlodipine', 'Lisinopril'],
    lastCheckup: '2024-01-10',
    notes: 'C·∫ßn theo d√µi huy·∫øt √°p h√†ng ng√†y, u·ªëng thu·ªëc ƒë√∫ng gi·ªù',
    bloodPressure: '140/90 mmHg',
    bloodSugar: '8.5 mmol/L',
    weight: '75 kg',
    height: '165 cm',
    bloodPressureUpdatedBy: 'Tr·∫ßn Th·ªã Mai',
    bloodPressureUpdatedAt: '2024-01-20 08:30',
    bloodSugarUpdatedBy: 'Tr·∫ßn Th·ªã Mai',
    bloodSugarUpdatedAt: '2024-01-20 08:30',
    heartRate: '85 bpm',
    temperature: '36.8¬∞C',
    oxygenSaturation: '96%',
    bmi: '27.5',
    allergies: ['Penicillin', 'Shellfish'],
    emergencyContact: 'Nguy·ªÖn Th·ªã Lan',
    emergencyPhone: '0901234567',
    doctorName: 'BS. Tr·∫ßn VƒÉn Minh',
    doctorPhone: '0281234567',
    nextAppointment: '2024-02-15',
    healthAlerts: [
      {
        type: 'warning',
        message: 'Huy·∫øt √°p cao h∆°n b√¨nh th∆∞·ªùng',
        date: '2024-01-20'
      },
      {
        type: 'info',
        message: 'C·∫ßn u·ªëng thu·ªëc ƒë√∫ng gi·ªù',
        date: '2024-01-19'
      }
    ],
    vitalHistory: [
      {
        date: '2024-01-20',
        bloodPressure: '140/90',
        bloodSugar: '8.5',
        heartRate: '85',
        weight: '75',
        recordedBy: 'Tr·∫ßn Th·ªã Mai'
      },
      {
        date: '2024-01-19',
        bloodPressure: '135/88',
        bloodSugar: '8.2',
        heartRate: '82',
        weight: '75.2',
        recordedBy: 'L√™ VƒÉn H√πng'
      }
    ]
  },
  {
    id: 'fm2',
    name: 'Tr·∫ßn Th·ªã M·∫π',
    age: 68,
    relationship: 'M·∫π',
    avatar: 'üë©‚Äçü¶≥',
    medicalConditions: ['Vi√™m kh·ªõp', 'Lo√£ng x∆∞∆°ng'],
    medications: ['Calcium', 'Vitamin D', 'Ibuprofen'],
    lastCheckup: '2024-01-15',
    notes: 'C·∫ßn t·∫≠p th·ªÉ d·ª•c nh·∫π nh√†ng, tr√°nh v·∫≠n ƒë·ªông m·∫°nh',
    bloodPressure: '125/80 mmHg',
    bloodSugar: '6.2 mmol/L',
    weight: '58 kg',
    height: '155 cm',
    bloodPressureUpdatedBy: 'L√™ VƒÉn H√πng',
    bloodPressureUpdatedAt: '2024-01-19 14:15',
    bloodSugarUpdatedBy: 'L√™ VƒÉn H√πng',
    bloodSugarUpdatedAt: '2024-01-19 14:15',
    heartRate: '78 bpm',
    temperature: '36.5¬∞C',
    oxygenSaturation: '98%',
    bmi: '24.1',
    allergies: ['Aspirin'],
    emergencyContact: 'Nguy·ªÖn VƒÉn B·ªë',
    emergencyPhone: '0901234568',
    doctorName: 'BS. L√™ Th·ªã Hoa',
    doctorPhone: '0281234568',
    nextAppointment: '2024-02-20',
    healthAlerts: [
      {
        type: 'info',
        message: 'T√¨nh tr·∫°ng s·ª©c kh·ªèe ·ªïn ƒë·ªãnh',
        date: '2024-01-19'
      }
    ],
    vitalHistory: [
      {
        date: '2024-01-19',
        bloodPressure: '125/80',
        bloodSugar: '6.2',
        heartRate: '78',
        weight: '58',
        recordedBy: 'L√™ VƒÉn H√πng'
      }
    ]
  }
];

// L·∫•y danh s√°ch th√†nh vi√™n gia ƒë√¨nh
export const getFamilyMembers = async (): Promise<FamilyMember[]> => {
  // Simulate API call
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(mockFamilyMembers);
    }, 500);
  });
};

// L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt th√†nh vi√™n gia ƒë√¨nh
export const getFamilyMemberById = async (id: string): Promise<FamilyMember | null> => {
  const members = await getFamilyMembers();
  return members.find(member => member.id === id) || null;
};
