import React, { useState } from 'react';
import { FiPlus, FiEdit, FiTrash2, FiCalendar, FiUser, FiHeart, FiActivity, FiDroplet, FiThermometer, FiEye, FiFileText, FiDownload, FiFilter, FiX } from 'react-icons/fi';

interface HealthRecord {
  id: number;
  date: string;
  time: string;
  type: 'checkup' | 'care' | 'emergency' | 'medication' | 'vital_signs';
  title: string;
  description: string;
  recordedBy: {
    name: string;
    role: 'Care Seeker' | 'Care Giver';
    avatar: string;
  };
  elderlyPerson: {
    name: string;
    age: number;
    relationship: string;
    avatar: string;
  };
  vitalSigns?: {
    bloodPressure?: string;
    heartRate?: number;
    temperature?: number;
    bloodSugar?: number;
    oxygenSaturation?: number;
  };
  medications?: Array<{
    name: string;
    dosage: string;
    frequency: string;
    notes?: string;
  }>;
  symptoms?: string[];
  diagnosis?: string;
  treatment?: string;
  followUp?: string;
  attachments?: Array<{
    name: string;
    type: 'image' | 'document' | 'lab_result';
    url: string;
  }>;
}

const HealthProfilePage: React.FC = () => {
  const [selectedFamilyMember, setSelectedFamilyMember] = useState<any>(null);
  const [selectedRecord, setSelectedRecord] = useState<HealthRecord | null>(null);
  const [isAddRecordModalOpen, setIsAddRecordModalOpen] = useState(false);
  const [isViewRecordModalOpen, setIsViewRecordModalOpen] = useState(false);
  const [filterType, setFilterType] = useState<string>('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [showMemberDetail, setShowMemberDetail] = useState(false);

  // Mock family members with current health status
  const familyMembers = [
    { 
      id: 1, 
      name: 'Nguy·ªÖn VƒÉn B·ªë', 
      age: 72, 
      relationship: 'B·ªë', 
      avatar: 'üë®‚Äçü¶≥', 
      conditions: ['Huy·∫øt √°p cao', 'Ti·ªÉu ƒë∆∞·ªùng'],
      currentHealth: {
        bloodPressure: '140/90',
        heartRate: 75,
        temperature: 36.5,
        bloodSugar: 7.2,
        oxygenSaturation: 98,
        lastUpdated: '22/01/2024 14:30',
        updatedBy: 'Tr·∫ßn Th·ªã Mai (Care Giver)',
        overallStatus: '·ªîn ƒë·ªãnh',
        riskLevel: 'Trung b√¨nh',
        nextCheckup: '25/04/2024',
        currentMedications: [
          { name: 'Amlodipine', dosage: '5mg', frequency: '1 l·∫ßn/ng√†y' },
          { name: 'Metformin', dosage: '500mg', frequency: '2 l·∫ßn/ng√†y' }
        ],
        recentSymptoms: ['ƒêau ƒë·∫ßu nh·∫π', 'M·ªát m·ªèi'],
        careNotes: 'C·∫ßn theo d√µi huy·∫øt √°p h√†ng ng√†y, u·ªëng thu·ªëc ƒë√∫ng gi·ªù'
      }
    },
    { 
      id: 2, 
      name: 'Tr·∫ßn Th·ªã M·∫π', 
      age: 68, 
      relationship: 'M·∫π', 
      avatar: 'üë©‚Äçü¶≥', 
      conditions: ['Vi√™m kh·ªõp', 'Lo√£ng x∆∞∆°ng'],
      currentHealth: {
        bloodPressure: '125/80',
        heartRate: 68,
        temperature: 36.3,
        bloodSugar: 5.8,
        oxygenSaturation: 99,
        lastUpdated: '21/01/2024 09:15',
        updatedBy: 'L√™ VƒÉn H√πng (Care Giver)',
        overallStatus: 'T·ªët',
        riskLevel: 'Th·∫•p',
        nextCheckup: '15/03/2024',
        currentMedications: [
          { name: 'Vitamin D3', dosage: '1000 IU', frequency: '1 l·∫ßn/ng√†y' },
          { name: 'Calcium', dosage: '600mg', frequency: '2 l·∫ßn/ng√†y' },
          { name: 'Glucosamine', dosage: '1500mg', frequency: '1 l·∫ßn/ng√†y' }
        ],
        recentSymptoms: ['ƒêau kh·ªõp nh·∫π'],
        careNotes: 'T·∫≠p luy·ªán nh·∫π nh√†ng, tr√°nh v·∫≠n ƒë·ªông m·∫°nh'
      }
    }
  ];

  // Mock health records
  const healthRecords: HealthRecord[] = [
    {
      id: 1,
      date: '22/01/2024',
      time: '14:30',
      type: 'checkup',
      title: 'Kh√°m ƒë·ªãnh k·ª≥ t·∫°i B·ªánh vi·ªán ƒêa khoa TP.HCM',
      description: 'Kh√°m ƒë·ªãnh k·ª≥ 6 th√°ng m·ªôt l·∫ßn. B√°c sƒ© ƒë√°nh gi√° t√¨nh tr·∫°ng s·ª©c kh·ªèe t·ªïng th·ªÉ.',
      recordedBy: {
        name: 'Nguy·ªÖn VƒÉn A',
        role: 'Care Seeker',
        avatar: 'üë®'
      },
      elderlyPerson: {
        name: 'Nguy·ªÖn VƒÉn B·ªë',
        age: 72,
        relationship: 'B·ªë',
        avatar: 'üë®‚Äçü¶≥'
      },
      vitalSigns: {
        bloodPressure: '140/90',
        heartRate: 75,
        temperature: 36.5,
        bloodSugar: 7.2
      },
      medications: [
        { name: 'Amlodipine', dosage: '5mg', frequency: '1 l·∫ßn/ng√†y', notes: 'U·ªëng sau ƒÉn s√°ng' },
        { name: 'Metformin', dosage: '500mg', frequency: '2 l·∫ßn/ng√†y', notes: 'U·ªëng tr∆∞·ªõc ƒÉn' }
      ],
      symptoms: ['ƒêau ƒë·∫ßu nh·∫π', 'M·ªát m·ªèi'],
      diagnosis: 'Huy·∫øt √°p cao, Ti·ªÉu ƒë∆∞·ªùng type 2',
      treatment: 'Ti·∫øp t·ª•c thu·ªëc hi·ªán t·∫°i, theo d√µi huy·∫øt √°p h√†ng ng√†y',
      followUp: 'T√°i kh√°m sau 3 th√°ng',
      attachments: [
        { name: 'K·∫øt qu·∫£ x√©t nghi·ªám m√°u', type: 'lab_result', url: '#' },
        { name: 'H√¨nh ·∫£nh X-quang ng·ª±c', type: 'image', url: '#' }
      ]
    },
    {
      id: 2,
      date: '21/01/2024',
      time: '09:15',
      type: 'care',
      title: 'ChƒÉm s√≥c h√†ng ng√†y - Theo d√µi huy·∫øt √°p',
      description: 'ƒêo huy·∫øt √°p v√† ƒë∆∞·ªùng huy·∫øt theo l·ªãch. B·ªánh nh√¢n h·ª£p t√°c t·ªët.',
      recordedBy: {
        name: 'Tr·∫ßn Th·ªã Mai',
        role: 'Care Giver',
        avatar: 'üë©‚Äç‚öïÔ∏è'
      },
      elderlyPerson: {
        name: 'Nguy·ªÖn VƒÉn B·ªë',
        age: 72,
        relationship: 'B·ªë',
        avatar: 'üë®‚Äçü¶≥'
      },
      vitalSigns: {
        bloodPressure: '135/85',
        heartRate: 72,
        bloodSugar: 6.8
      },
      medications: [
        { name: 'Amlodipine', dosage: '5mg', frequency: '1 l·∫ßn/ng√†y', notes: 'ƒê√£ u·ªëng ƒë√∫ng gi·ªù' }
      ]
    },
    {
      id: 3,
      date: '20/01/2024',
      time: '16:45',
      type: 'emergency',
      title: 'C·∫•p c·ª©u - Huy·∫øt √°p tƒÉng cao ƒë·ªôt ng·ªôt',
      description: 'Huy·∫øt √°p tƒÉng l√™n 160/95 mmHg, b·ªánh nh√¢n c√≥ bi·ªÉu hi·ªán ƒëau ƒë·∫ßu v√† ch√≥ng m·∫∑t.',
      recordedBy: {
        name: 'L√™ VƒÉn H√πng',
        role: 'Care Giver',
        avatar: 'üë®‚Äç‚öïÔ∏è'
      },
      elderlyPerson: {
        name: 'Nguy·ªÖn VƒÉn B·ªë',
        age: 72,
        relationship: 'B·ªë',
        avatar: 'üë®‚Äçü¶≥'
      },
      vitalSigns: {
        bloodPressure: '160/95',
        heartRate: 85,
        temperature: 36.8
      },
      symptoms: ['ƒêau ƒë·∫ßu d·ªØ d·ªôi', 'Ch√≥ng m·∫∑t', 'Bu·ªìn n√¥n'],
      treatment: 'Cho u·ªëng thu·ªëc h·∫° huy·∫øt √°p kh·∫©n c·∫•p, g·ªçi b√°c sƒ© t∆∞ v·∫•n',
      followUp: 'Theo d√µi s√°t sao, t√°i kh√°m n·∫øu kh√¥ng c·∫£i thi·ªán'
    },
    {
      id: 4,
      date: '19/01/2024',
      time: '10:30',
      type: 'medication',
      title: 'C·∫≠p nh·∫≠t thu·ªëc - Th√™m vitamin D',
      description: 'B√°c sƒ© k√™ th√™m vitamin D3 do thi·∫øu h·ª•t vitamin D.',
      recordedBy: {
        name: 'Nguy·ªÖn VƒÉn A',
        role: 'Care Seeker',
        avatar: 'üë®'
      },
      elderlyPerson: {
        name: 'Tr·∫ßn Th·ªã M·∫π',
        age: 68,
        relationship: 'M·∫π',
        avatar: 'üë©‚Äçü¶≥'
      },
      medications: [
        { name: 'Vitamin D3', dosage: '1000 IU', frequency: '1 l·∫ßn/ng√†y', notes: 'U·ªëng sau ƒÉn s√°ng' },
        { name: 'Calcium', dosage: '600mg', frequency: '2 l·∫ßn/ng√†y', notes: 'U·ªëng v·ªõi n∆∞·ªõc' }
      ]
    }
  ];

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'checkup': return <FiCalendar className="h-5 w-5" />;
      case 'care': return <FiHeart className="h-5 w-5" />;
      case 'emergency': return <FiActivity className="h-5 w-5" />;
      case 'medication': return <FiDroplet className="h-5 w-5" />;
      case 'vital_signs': return <FiThermometer className="h-5 w-5" />;
      default: return <FiFileText className="h-5 w-5" />;
    }
  };

  const getTypeColor = (type: string) => {
    switch (type) {
      case 'checkup': return 'bg-blue-100 text-blue-800';
      case 'care': return 'bg-green-100 text-green-800';
      case 'emergency': return 'bg-red-100 text-red-800';
      case 'medication': return 'bg-purple-100 text-purple-800';
      case 'vital_signs': return 'bg-orange-100 text-orange-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getTypeLabel = (type: string) => {
    switch (type) {
      case 'checkup': return 'Kh√°m b·ªánh';
      case 'care': return 'ChƒÉm s√≥c';
      case 'emergency': return 'C·∫•p c·ª©u';
      case 'medication': return 'Thu·ªëc men';
      case 'vital_signs': return 'Vital signs';
      default: return 'Kh√°c';
    }
  };

  const filteredRecords = healthRecords.filter(record => {
    const matchesFilter = filterType === 'all' || record.type === filterType;
    const matchesSearch = record.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         record.description.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesFilter && matchesSearch;
  });

  const handleAddRecord = () => {
    setIsAddRecordModalOpen(true);
  };

  const handleViewRecord = (record: HealthRecord) => {
    setSelectedRecord(record);
    setIsViewRecordModalOpen(true);
  };

  const handleViewMemberDetail = (member: any) => {
    setSelectedFamilyMember(member);
    setShowMemberDetail(true);
  };

  const handleCloseModals = () => {
    setIsAddRecordModalOpen(false);
    setIsViewRecordModalOpen(false);
    setSelectedRecord(null);
    setShowMemberDetail(false);
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">H·ªì s∆° s·ª©c kh·ªèe</h1>
          <p className="text-gray-600 mt-2">Qu·∫£n l√Ω th√¥ng tin s·ª©c kh·ªèe c·ªßa ng∆∞·ªùi th√¢n</p>
        </div>
        <button
          onClick={handleAddRecord}
          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2"
        >
          <FiPlus className="h-5 w-5" />
          <span>Th√™m b·∫£n ghi</span>
        </button>
      </div>

      {/* Family Member Selection */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <h2 className="text-lg font-semibold text-gray-900 mb-4">Th√†nh vi√™n gia ƒë√¨nh</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {familyMembers.map((member) => (
            <div
              key={member.id}
              className="p-4 border border-gray-200 rounded-lg hover:shadow-md transition-shadow"
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <div className="text-3xl">{member.avatar}</div>
                  <div>
                    <h3 className="font-semibold text-gray-900">{member.name}</h3>
                    <p className="text-sm text-gray-600">{member.age} tu·ªïi - {member.relationship}</p>
                    <div className="flex flex-wrap gap-1 mt-1">
                      {member.conditions.map((condition, index) => (
                        <span key={index} className="px-2 py-1 bg-red-100 text-red-800 text-xs rounded-full">
                          {condition}
                        </span>
                      ))}
                    </div>
                    <div className="mt-2">
                      <span className={`px-2 py-1 text-xs rounded-full ${
                        member.currentHealth.riskLevel === 'Th·∫•p' ? 'bg-green-100 text-green-800' :
                        member.currentHealth.riskLevel === 'Trung b√¨nh' ? 'bg-yellow-100 text-yellow-800' :
                        'bg-red-100 text-red-800'
                      }`}>
                        {member.currentHealth.overallStatus} - {member.currentHealth.riskLevel}
                      </span>
                    </div>
                  </div>
                </div>
                <button
                  onClick={() => handleViewMemberDetail(member)}
                  className="px-4 py-2 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2"
                >
                  <FiEye className="h-4 w-4" />
                  <span>Xem chi ti·∫øt</span>
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Instructions */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
        <div className="flex items-center space-x-3">
          <FiHeart className="h-6 w-6 text-blue-600" />
          <div>
            <h3 className="font-semibold text-blue-900">H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</h3>
            <p className="text-blue-700 mt-1">Nh·∫•n "Xem chi ti·∫øt" b√™n c·∫°nh t√™n th√†nh vi√™n ƒë·ªÉ xem t√¨nh tr·∫°ng s·ª©c kh·ªèe hi·ªán t·∫°i v√† l·ªãch s·ª≠ s·ª©c kh·ªèe c·ªßa h·ªç.</p>
          </div>
        </div>
      </div>

      {/* Member Detail Modal */}
      {showMemberDetail && selectedFamilyMember && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl shadow-2xl max-w-6xl w-full max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between p-6 border-b border-gray-200">
              <div className="flex items-center space-x-4">
                <div className="text-4xl">{selectedFamilyMember.avatar}</div>
                <div>
                  <h2 className="text-2xl font-bold text-gray-900">{selectedFamilyMember.name}</h2>
                  <p className="text-gray-600">{selectedFamilyMember.age} tu·ªïi - {selectedFamilyMember.relationship}</p>
                </div>
              </div>
              <button
                onClick={handleCloseModals}
                className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
              >
                <FiX className="h-6 w-6 text-gray-500" />
              </button>
            </div>
            
            <div className="p-6 space-y-6">
              {/* Current Health Status */}
              <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-6">
                <h3 className="text-xl font-bold text-gray-900 mb-4 flex items-center space-x-2">
                  <FiHeart className="h-6 w-6 text-blue-600" />
                  <span>T√¨nh tr·∫°ng s·ª©c kh·ªèe hi·ªán t·∫°i</span>
                </h3>
                
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
                  <div className="bg-white p-4 rounded-lg shadow-sm">
                    <div className="flex items-center space-x-2 mb-2">
                      <FiDroplet className="h-5 w-5 text-red-600" />
                      <span className="font-medium text-gray-900">Huy·∫øt √°p</span>
                    </div>
                    <p className="text-2xl font-bold text-red-600">{selectedFamilyMember.currentHealth.bloodPressure}</p>
                    <p className="text-sm text-gray-600">mmHg</p>
                  </div>
                  
                  <div className="bg-white p-4 rounded-lg shadow-sm">
                    <div className="flex items-center space-x-2 mb-2">
                      <FiHeart className="h-5 w-5 text-blue-600" />
                      <span className="font-medium text-gray-900">Nh·ªãp tim</span>
                    </div>
                    <p className="text-2xl font-bold text-blue-600">{selectedFamilyMember.currentHealth.heartRate}</p>
                    <p className="text-sm text-gray-600">bpm</p>
                  </div>
                  
                  <div className="bg-white p-4 rounded-lg shadow-sm">
                    <div className="flex items-center space-x-2 mb-2">
                      <FiThermometer className="h-5 w-5 text-orange-600" />
                      <span className="font-medium text-gray-900">Nhi·ªát ƒë·ªô</span>
                    </div>
                    <p className="text-2xl font-bold text-orange-600">{selectedFamilyMember.currentHealth.temperature}</p>
                    <p className="text-sm text-gray-600">¬∞C</p>
                  </div>
                  
                  <div className="bg-white p-4 rounded-lg shadow-sm">
                    <div className="flex items-center space-x-2 mb-2">
                      <FiActivity className="h-5 w-5 text-green-600" />
                      <span className="font-medium text-gray-900">ƒê∆∞·ªùng huy·∫øt</span>
                    </div>
                    <p className="text-2xl font-bold text-green-600">{selectedFamilyMember.currentHealth.bloodSugar}</p>
                    <p className="text-sm text-gray-600">mmol/L</p>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="bg-white p-4 rounded-lg shadow-sm">
                    <h4 className="font-semibold text-gray-900 mb-2">T√¨nh tr·∫°ng t·ªïng th·ªÉ</h4>
                    <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                      selectedFamilyMember.currentHealth.overallStatus === 'T·ªët' ? 'bg-green-100 text-green-800' :
                      selectedFamilyMember.currentHealth.overallStatus === '·ªîn ƒë·ªãnh' ? 'bg-yellow-100 text-yellow-800' :
                      'bg-red-100 text-red-800'
                    }`}>
                      {selectedFamilyMember.currentHealth.overallStatus}
                    </span>
                  </div>
                  
                  <div className="bg-white p-4 rounded-lg shadow-sm">
                    <h4 className="font-semibold text-gray-900 mb-2">M·ª©c ƒë·ªô r·ªßi ro</h4>
                    <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                      selectedFamilyMember.currentHealth.riskLevel === 'Th·∫•p' ? 'bg-green-100 text-green-800' :
                      selectedFamilyMember.currentHealth.riskLevel === 'Trung b√¨nh' ? 'bg-yellow-100 text-yellow-800' :
                      'bg-red-100 text-red-800'
                    }`}>
                      {selectedFamilyMember.currentHealth.riskLevel}
                    </span>
                  </div>
                  
                  <div className="bg-white p-4 rounded-lg shadow-sm">
                    <h4 className="font-semibold text-gray-900 mb-2">C·∫≠p nh·∫≠t l·∫ßn cu·ªëi</h4>
                    <p className="text-sm text-gray-600">{selectedFamilyMember.currentHealth.lastUpdated}</p>
                    <p className="text-xs text-gray-500">B·ªüi {selectedFamilyMember.currentHealth.updatedBy}</p>
                  </div>
                </div>
              </div>

              {/* Current Medications */}
              <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <h3 className="text-xl font-bold text-gray-900 mb-4 flex items-center space-x-2">
                  <FiDroplet className="h-6 w-6 text-purple-600" />
                  <span>Thu·ªëc ƒëang s·ª≠ d·ª•ng</span>
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {selectedFamilyMember.currentHealth.currentMedications.map((med: any, index: number) => (
                    <div key={index} className="bg-purple-50 p-4 rounded-lg">
                      <h4 className="font-semibold text-purple-900">{med.name}</h4>
                      <p className="text-purple-700">{med.dosage} - {med.frequency}</p>
                    </div>
                  ))}
                </div>
              </div>

              {/* Recent Symptoms & Care Notes */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-3">Tri·ªáu ch·ª©ng g·∫ßn ƒë√¢y</h3>
                  <div className="space-y-2">
                    {selectedFamilyMember.currentHealth.recentSymptoms.map((symptom: string, index: number) => (
                      <div key={index} className="flex items-center space-x-2">
                        <div className="w-2 h-2 bg-orange-400 rounded-full"></div>
                        <span className="text-gray-700">{symptom}</span>
                      </div>
                    ))}
                  </div>
                </div>
                
                <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-3">Ghi ch√∫ chƒÉm s√≥c</h3>
                  <p className="text-gray-700">{selectedFamilyMember.currentHealth.careNotes}</p>
                </div>
              </div>

              {/* Health History */}
              <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <h3 className="text-xl font-bold text-gray-900 mb-4 flex items-center space-x-2">
                  <FiFileText className="h-6 w-6 text-gray-600" />
                  <span>L·ªãch s·ª≠ s·ª©c kh·ªèe</span>
                </h3>
                <div className="space-y-4">
                  {healthRecords
                    .filter(record => record.elderlyPerson.name === selectedFamilyMember.name)
                    .slice(0, 5)
                    .map((record) => (
                      <div key={record.id} className="border-l-4 border-blue-500 pl-4 py-2">
                        <div className="flex items-center justify-between">
                          <div>
                            <h4 className="font-semibold text-gray-900">{record.title}</h4>
                            <p className="text-sm text-gray-600">{record.date} {record.time}</p>
                            <p className="text-sm text-gray-700 mt-1">{record.description}</p>
                          </div>
                          <button
                            onClick={() => {
                              setShowMemberDetail(false);
                              handleViewRecord(record);
                            }}
                            className="px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700"
                          >
                            Xem chi ti·∫øt
                          </button>
                        </div>
                      </div>
                    ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Add Record Modal */}
      {isAddRecordModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between p-6 border-b border-gray-200">
              <h2 className="text-2xl font-bold text-gray-900">Th√™m b·∫£n ghi s·ª©c kh·ªèe</h2>
              <button
                onClick={handleCloseModals}
                className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
              >
                <FiX className="h-6 w-6 text-gray-500" />
              </button>
            </div>
            <div className="p-6">
              <p className="text-gray-600">T√≠nh nƒÉng th√™m b·∫£n ghi s·ª©c kh·ªèe s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn sau.</p>
            </div>
          </div>
        </div>
      )}

      {/* View Record Modal */}
      {isViewRecordModalOpen && selectedRecord && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between p-6 border-b border-gray-200">
              <h2 className="text-2xl font-bold text-gray-900">Chi ti·∫øt b·∫£n ghi s·ª©c kh·ªèe</h2>
              <button
                onClick={handleCloseModals}
                className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
              >
                <FiX className="h-6 w-6 text-gray-500" />
              </button>
            </div>
            <div className="p-6 space-y-6">
              {/* Header Info */}
              <div className="flex items-center space-x-4">
                <div className={`p-3 rounded-lg ${getTypeColor(selectedRecord.type)}`}>
                  {getTypeIcon(selectedRecord.type)}
                </div>
                <div>
                  <h3 className="text-xl font-semibold text-gray-900">{selectedRecord.title}</h3>
                  <p className="text-gray-600">{selectedRecord.date} {selectedRecord.time}</p>
                </div>
              </div>

              {/* Description */}
              <div>
                <h4 className="font-semibold text-gray-900 mb-2">M√¥ t·∫£</h4>
                <p className="text-gray-700">{selectedRecord.description}</p>
              </div>

              {/* Vital Signs */}
              {selectedRecord.vitalSigns && (
                <div>
                  <h4 className="font-semibold text-gray-900 mb-3">Vital Signs</h4>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    {selectedRecord.vitalSigns.bloodPressure && (
                      <div className="bg-red-50 p-3 rounded-lg">
                        <div className="flex items-center space-x-2">
                          <FiDroplet className="h-5 w-5 text-red-600" />
                          <span className="font-medium text-red-900">Huy·∫øt √°p</span>
                        </div>
                        <p className="text-red-700 font-semibold">{selectedRecord.vitalSigns.bloodPressure} mmHg</p>
                      </div>
                    )}
                    {selectedRecord.vitalSigns.heartRate && (
                      <div className="bg-blue-50 p-3 rounded-lg">
                        <div className="flex items-center space-x-2">
                          <FiHeart className="h-5 w-5 text-blue-600" />
                          <span className="font-medium text-blue-900">Nh·ªãp tim</span>
                        </div>
                        <p className="text-blue-700 font-semibold">{selectedRecord.vitalSigns.heartRate} bpm</p>
                      </div>
                    )}
                    {selectedRecord.vitalSigns.temperature && (
                      <div className="bg-orange-50 p-3 rounded-lg">
                        <div className="flex items-center space-x-2">
                          <FiThermometer className="h-5 w-5 text-orange-600" />
                          <span className="font-medium text-orange-900">Nhi·ªát ƒë·ªô</span>
                        </div>
                        <p className="text-orange-700 font-semibold">{selectedRecord.vitalSigns.temperature}¬∞C</p>
                      </div>
                    )}
                    {selectedRecord.vitalSigns.bloodSugar && (
                      <div className="bg-green-50 p-3 rounded-lg">
                        <div className="flex items-center space-x-2">
                          <FiActivity className="h-5 w-5 text-green-600" />
                          <span className="font-medium text-green-900">ƒê∆∞·ªùng huy·∫øt</span>
                        </div>
                        <p className="text-green-700 font-semibold">{selectedRecord.vitalSigns.bloodSugar} mmol/L</p>
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* Medications */}
              {selectedRecord.medications && selectedRecord.medications.length > 0 && (
                <div>
                  <h4 className="font-semibold text-gray-900 mb-3">Thu·ªëc men</h4>
                  <div className="space-y-2">
                    {selectedRecord.medications.map((med, index) => (
                      <div key={index} className="bg-purple-50 p-3 rounded-lg">
                        <div className="flex items-center justify-between">
                          <div>
                            <h5 className="font-medium text-purple-900">{med.name}</h5>
                            <p className="text-sm text-purple-700">{med.dosage} - {med.frequency}</p>
                            {med.notes && <p className="text-xs text-purple-600 mt-1">{med.notes}</p>}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Diagnosis & Treatment */}
              {selectedRecord.diagnosis && (
                <div>
                  <h4 className="font-semibold text-gray-900 mb-2">Ch·∫©n ƒëo√°n</h4>
                  <p className="text-gray-700 bg-yellow-50 p-3 rounded-lg">{selectedRecord.diagnosis}</p>
                </div>
              )}

              {selectedRecord.treatment && (
                <div>
                  <h4 className="font-semibold text-gray-900 mb-2">ƒêi·ªÅu tr·ªã</h4>
                  <p className="text-gray-700 bg-blue-50 p-3 rounded-lg">{selectedRecord.treatment}</p>
                </div>
              )}

              {selectedRecord.followUp && (
                <div>
                  <h4 className="font-semibold text-gray-900 mb-2">Theo d√µi</h4>
                  <p className="text-gray-700 bg-green-50 p-3 rounded-lg">{selectedRecord.followUp}</p>
                </div>
              )}

              {/* Attachments */}
              {selectedRecord.attachments && selectedRecord.attachments.length > 0 && (
                <div>
                  <h4 className="font-semibold text-gray-900 mb-3">T√†i li·ªáu ƒë√≠nh k√®m</h4>
                  <div className="space-y-2">
                    {selectedRecord.attachments.map((attachment, index) => (
                      <div key={index} className="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg">
                        <FiFileText className="h-5 w-5 text-gray-600" />
                        <span className="text-gray-700">{attachment.name}</span>
                        <button className="ml-auto px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700">
                          T·∫£i xu·ªëng
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default HealthProfilePage;
