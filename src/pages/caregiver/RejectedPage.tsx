import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';

import Footer from '../../components/layout/Footer';

interface UserData {
  id: string;
  fullName: string;
  email: string;
  status: string;
  role: string;
  rejectionReason?: string;
}

const RejectedPage: React.FC = () => {
  const [userData, setUserData] = useState<UserData | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchUserData = async () => {
      const userId = localStorage.getItem('userId');
      if (!userId) {
        alert('Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        navigate('/login');
        return;
      }

      try {
        const response = await axios.get(`https://68aed258b91dfcdd62ba657c.mockapi.io/users/${userId}`);
        const user = response.data;
        
        // Check if user is rejected caregiver
        if (user.status === 'rejected' && user.role === 'Caregiver') {
          setUserData(user);
        } else {
          // Redirect to appropriate dashboard based on status and role
          if (user.role === 'Caregiver') {
            if (user.status === 'approved') {
              navigate('/care-giver');
            } else if (user.status === 'pending') {
              navigate('/care-giver/pending-approval');
            } else {
              navigate('/care-giver/upload-credentials');
            }
          } else if (user.role === 'CareSeeker') {
            navigate('/care-seeker');
          } else if (user.role === 'Admin') {
            navigate('/admin/dashboard');
          } else {
            navigate('/');
          }
        }
      } catch (error) {
        console.error('L·ªói khi t·∫£i th√¥ng tin ng∆∞·ªùi d√πng:', error);
        alert('C√≥ l·ªói x·∫£y ra khi t·∫£i th√¥ng tin ng∆∞·ªùi d√πng.');
        navigate('/login');
      } finally {
        setIsLoading(false);
      }
    };

    fetchUserData();
  }, [navigate]);

  const handleGoHome = () => {
    navigate('/');
  };

  const handleContactSupport = () => {
    // You can implement contact support functionality here
    // For now, we'll just show an alert
    alert('Li√™n h·ªá h·ªó tr·ª£: support@caregiver.com ho·∫∑c hotline: 1900-xxxx');
  };

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-orange-500 mx-auto"></div>
          <p className="mt-4 text-gray-600">ƒêang t·∫£i th√¥ng tin...</p>
        </div>
      </div>
    );
  }

  if (!userData) {
    return null; // Will redirect in useEffect
  }

  return (
    <div className="min-h-screen flex flex-col bg-gray-50">
      <div className="flex-grow flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-md w-full">
          <div className="bg-white shadow-lg rounded-lg p-8 text-center">
            {/* Warning Icon */}
            <div className="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-orange-100 mb-6">
              <svg
                className="h-8 w-8 text-orange-600"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
                aria-hidden="true"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"
                />
              </svg>
            </div>

            {/* Title */}
            <h1 className="text-2xl font-bold text-gray-900 mb-4">
              H·ªì s∆° c·ªßa b·∫°n ƒë√£ b·ªã t·ª´ ch·ªëi
            </h1>

            {/* Description */}
            <p className="text-gray-600 mb-8 leading-relaxed">
              R·∫•t ti·∫øc, h·ªì s∆° ƒëƒÉng k√Ω c·ªßa b·∫°n kh√¥ng ƒë√°p ·ª©ng y√™u c·∫ßu. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n ƒë·ªÉ bi·∫øt th√™m th√¥ng tin ho·∫∑c ch·ªânh s·ª≠a l·∫°i th√¥ng tin h·ªì s∆° n·∫øu c·∫ßn.
            </p>

            {/* User Information */}
            <div className="bg-orange-50 border border-orange-200 rounded-lg p-4 mb-8">
              <h3 className="font-semibold text-orange-900 mb-3">Th√¥ng tin h·ªì s∆°</h3>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-600">H·ªç v√† t√™n:</span>
                  <span className="font-medium text-gray-900">{userData.fullName}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Email:</span>
                  <span className="font-medium text-gray-900">{userData.email}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Tr·∫°ng th√°i:</span>
                  <span className="font-medium text-red-600">B·ªã t·ª´ ch·ªëi</span>
                </div>
              </div>
            </div>

            {/* Rejection Reason (if available) */}
            {userData.rejectionReason && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-8">
                <h4 className="font-semibold text-red-900 mb-2">L√Ω do t·ª´ ch·ªëi:</h4>
                <p className="text-red-800 text-sm">{userData.rejectionReason}</p>
              </div>
            )}

            {/* Action Buttons */}
            <div className="space-y-4">
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
                <p className="text-blue-800 text-sm">
                  <span className="font-semibold">üí° G·ª£i √Ω:</span> B·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a l·∫°i h·ªì s∆° v√† g·ª≠i l·∫°i ƒë·ªÉ admin x√©t duy·ªát l·∫ßn n·ªØa.
                </p>
              </div>
              
              <button
                onClick={() => navigate('/care-giver/upload-credentials')}
                className="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200 flex items-center justify-center"
              >
                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                </svg>
                Ch·ªânh s·ª≠a h·ªì s∆°
              </button>
              
              <button
                onClick={handleContactSupport}
                className="w-full bg-orange-600 hover:bg-orange-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200"
              >
                Li√™n h·ªá h·ªó tr·ª£
              </button>
              
              <button
                onClick={handleGoHome}
                className="w-full bg-gray-600 hover:bg-gray-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200"
              >
                Quay v·ªÅ trang ch·ªß
              </button>
            </div>

            {/* Additional Help */}
            <div className="mt-8 pt-6 border-t border-gray-200">
              <p className="text-xs text-gray-500">
                N·∫øu b·∫°n c·∫ßn h·ªó tr·ª£ th√™m, vui l√≤ng li√™n h·ªá qua email: support@caregiver.com
              </p>
            </div>
          </div>
        </div>
      </div>
      
      <Footer />
    </div>
  );
};

export default RejectedPage;
